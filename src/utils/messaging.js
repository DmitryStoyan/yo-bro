import {
  // getMessaging,
  getToken,
  onMessage,
  deleteToken,
} from "firebase/messaging";
import {
  getFirestore,
  doc,
  updateDoc,
  arrayUnion,
  arrayRemove,
} from "firebase/firestore";
import firebaseApp from "./firebase";

const VAPID_KEY =
  "BDYkhdsevukfsrIPM5iT0zPZp0aULZHFm7kzZsfnqtBYkeQoudMAGNDsNPlNj4kHcufJ2R9xlKt-lS1IzIOkxck";

// const messaging = getMessaging(firebaseApp);
const db = getFirestore(firebaseApp);

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç FCM-—Ç–æ–∫–µ–Ω –≤ Realtime Database.
 * –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ –ø—É—Ç–∏: users/{uid}/fcmTokens/{token} = true
 */
async function saveFCMToken(userId, token) {
  const userRef = doc(db, "users", userId, "ProfileInfo", "main");
  await updateDoc(userRef, {
    fcmTokens: arrayUnion(token),
  });
  console.log("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Firestore:", token);
}

/**
 * –£–¥–∞–ª—è–µ—Ç FCM-—Ç–æ–∫–µ–Ω –∏–∑ Realtime Database.
 */
export async function removeFCMToken(userId, token) {
  const userRef = doc(db, "users", userId, "ProfileInfo", "main");
  await updateDoc(userRef, {
    fcmTokens: arrayRemove(token),
  });
  console.log("üóëÔ∏è –£–¥–∞–ª—ë–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω:", token);
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç FCM-—Ç–æ–∫–µ–Ω.
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} [token] - FCM-—Ç–æ–∫–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ Capacitor)
 */
export async function requestFCMPermission(userId, token = null) {
  try {
    if (token) {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Capacitor), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
      await saveFCMToken(userId, token);
      return true;
    }

    // –í–µ–±-–ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    const permission = await Notification.requestPermission();
    if (permission !== "granted") {
      console.warn("‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ");
      if (/Android/i.test(navigator.userAgent)) {
        alert(
          "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è > Yo Bro > –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
        );
      }
      return false;
    }

    const newToken = await getToken(messaging, { vapidKey: VAPID_KEY });
    if (newToken) {
      console.log("FCM-—Ç–æ–∫–µ–Ω:", newToken);
      await saveFCMToken(userId, newToken);
      return true;
    } else {
      console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å FCM-—Ç–æ–∫–µ–Ω");
      return false;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    await saveFCMToken(uid, token);
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—É—à–∏:", error);
    return false;
  }
}

/**
 * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
 */
export function listenFCMMessages(callback) {
  onMessage(messaging, (payload) => {
    console.log("üîî –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏:", payload);
    callback(payload);
  });
}
